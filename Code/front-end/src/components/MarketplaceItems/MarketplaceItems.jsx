import React, { useState, useEffect, useCallback } from 'react';
import BidHistory from '../BidHistory/BidHistory';
import * as constant from '../../id/id';

const MarketplaceItems = () => {
  const [parentID, setParentID] = useState(null);
  const [bagData, setBagData] = useState(null);
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // H√†m t·∫£i d·ªØ li·ªáu NFT
  const loadNFT = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîÑ ƒêang t·∫£i d·ªØ li·ªáu NFT v·ªõi marketID:', constant.marketID);
      
      // Ki·ªÉm tra n·∫øu marketID kh√¥ng t·ªìn t·∫°i
      if (!constant.marketID) {
        throw new Error('marketID kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong file constant');
      }
      
      // Ki·ªÉm tra n·∫øu client kh√¥ng t·ªìn t·∫°i
      if (!constant.client) {
        throw new Error('Sui client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      }
      
      const options = {
        showType: true,
        showOwner: true,
        showPreviousTransaction: true,
        showDisplay: true,
        showContent: true,
        showBcs: true,
        showStorageRebate: true
      };
      
      console.log('üì° G·ªçi API v·ªõi tham s·ªë:', { 
        method: 'sui_getObject', 
        params: [constant.marketID, options] 
      });
      
      const result = await constant.client.call('sui_getObject', [
        constant.marketID,
        options
      ]);

      console.log('üì• K·∫øt qu·∫£ t·ª´ API:', result);
      
      // Ki·ªÉm tra l·ªói t·ª´ API
      if (result?.error) {
        console.error('‚ùå L·ªói t·ª´ API:', result.error);
        throw new Error(result.error.message || `L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ API: ${JSON.stringify(result.error)}`);
      }
      
      if (!result) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API');
      }

      setBagData(result);
      return result;
    } catch (err) {
      console.error('‚ùå L·ªói khi t·∫£i NFT:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu');
      setBagData(null);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  // Load d·ªØ li·ªáu khi component mount
  useEffect(() => {
    loadNFT();
  }, [loadNFT]);

  // X·ª≠ l√Ω khi bagData thay ƒë·ªïi
  useEffect(() => {
    const timer = setTimeout(() => {
      if (!bagData) return;
      
      try {
        const id = bagData?.data?.content?.fields?.items?.fields?.id?.id;
        if (id) {
          setParentID(id);
        } else {
          console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ID trong d·ªØ li·ªáu bagData');
        }
      } catch (err) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu bagData:', err);
      }
    }, 100);
    
    return () => clearTimeout(timer);
  }, [bagData]);

  // X·ª≠ l√Ω khi parentID thay ƒë·ªïi
  useEffect(() => {
    if (!parentID) return;
    
    const fetchItems = async () => {
      try {
        const response = await constant.client.call('suix_getDynamicFields', [parentID]);
        if (response.error) {
          throw new Error(response.error.message || 'L·ªói khi t·∫£i danh s√°ch items');
        }
        setItems(response.data || []);
      } catch (err) {
        console.error('‚ùå L·ªói khi t·∫£i items:', err);
        setItems([]);
      }
    };
    
    fetchItems();
  }, [parentID]);

return (
    <div className="NFTSaleTab">
      <BidHistory title="Welcome to EAM Marketplace" data={items} parentID={parentID} status={1} />
    </div>
  );
};

export default MarketplaceItems;
